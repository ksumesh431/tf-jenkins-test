version: 2.1

jobs:
  terraform-job:
    docker:
      # Using a Docker image with Terraform installed (e.g., CircleCI's Terraform image or a custom one).
      - image: hashicorp/terraform:latest
    environment:
      # Set up AWS credentials as environment variables, using CircleCI's environment variables or contexts.
      AWS_ACCESS_KEY_ID: << pipeline.parameters.AWS_ACCESS_KEY_ID >>
      AWS_SECRET_ACCESS_KEY: << pipeline.parameters.AWS_SECRET_ACCESS_KEY >>
      # Environment variable to control destroy behavior
      DO_DESTROY: "false" # Set to true to run terraform destroy

    steps:

      # Terraform init step
      - run:
          name: "Terraform Init"
          command: terraform init

      # Conditionally run Terraform apply or destroy based on the DO_DESTROY environment variable
      - run:
          name: "Terraform Plan or Apply/Destroy"
          command: |
            if [ "$DO_DESTROY" = "true" ]; then
              echo "Running terraform destroy..."
              terraform destroy --auto-approve
            else
              echo "Running terraform plan and apply..."
              terraform plan
              terraform apply --auto-approve
            fi

workflows:
  terraform-workflow:
    jobs:
      - terraform-job:
          context: my-aws-context # Use a CircleCI context to provide AWS credentials securely
          filters:
            branches:
              only: main
